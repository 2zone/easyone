
int px4_daemon_app_main(int argc, char *argv[])
{
	if (argc < 2) {
		usage("missing command");
		return 1;
	}       				
//argc는 프로그램을 실행할때 지정한옵션의 개수 옵션을 하나도 입력하지 않았을때 argc는 1이다. 옵션이 최소 2개일때 command 받음

	if (!strcmp(argv[1], "start")) {

		if (thread_running) {
			warnx("daemon already running\n");
			/* this is not an error */
			return 0;
		} 
//옵션arv[0]=파일명, 옵션arv[1]은 명령, 명령과 문자열start 비교해서 같으면  if 이하 실행 thread running중이면 daemon already running 출력 

		thread_should_exit = false;  //스레드 종료=0 : 스레드를 종료하지않음
		daemon_task = px4_task_spawn_cmd("daemon",
						 SCHED_DEFAULT,
						 SCHED_PRIORITY_DEFAULT,
						 2000,
						 px4_daemon_thread_main,
						 (argv) ? (char *const *)&argv[2] : (char *const *)NULL);
		return 0;
	} 
//PX4_task_spawn_cmd (const char *name, int scheduler, int priority, int stack_size, main_t entry, char * const argv[]) 으로 되어있음
//데몬 thread main 을 만들고 실행 

	if (!strcmp(argv[1], "stop")) {
		thread_should_exit = true;
		return 0;
	}
//명령(옵션1)이 stop 이면 스레드종료

	if (!strcmp(argv[1], "status")) {
		if (thread_running) {
			warnx("\trunning\n");

		} else {
			warnx("\tnot started\n");
		}

		return 0;
	}

	usage("unrecognized command");
	return 1;
}
//명령(옵션1)이 status 이면 상태플래그를 읽어서 실행중인지 아닌지 알려줌


int px4_daemon_thread_main(int argc, char *argv[])
{

	warnx("[daemon] starting\n");

	thread_running = true;

	while (!thread_should_exit) {
		warnx("Hello daemon!\n");
		sleep(10);
	}

	warnx("[daemon] exiting.\n");

	thread_running = false;

	return 0;
}
//데몬 시작을 알림 스레드 상태플래그=1로 업뎃
스레드 종료 명령이 들어오기전까지 hellom daemon 출력 데몬활성화 알림
스레드 상태플래그=0으로 업 
